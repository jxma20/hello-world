#include <iostream>
#include "assert.h"
using namespace std;

template<class T,int SIZE=50>
class Stack{
private:
    T list [SIZE];  //数组用于存放栈的元素
    int top;//栈顶位置
public:
    Stack();  //构造函数，初始化栈
    void push(const T &item); //将元素压入栈
    T pop(); //将栈顶元素弹出栈
    void clear();  //将栈清空
    const T &peek() const; //访问栈顶元素
    bool isEmpty() const; //判断是否栈满
    bool isFull() const; //判断是否栈空
};
template<class T,int SIZE>
Stack<T,SIZE>::Stack():top(-1){} //构造函数，栈顶初始化为-1

template<class T,int SIZE>
void Stack<T,SIZE>::push(const T& item){ //将元素item压入栈
    assert(!isFull()); //如果栈满了，则报错
    list[++top]=item; //将新元素压入栈顶
}

template<class T,int SIZE>
T Stack<T,SIZE>::pop(){    //将栈顶元素弹出栈
    assert(!isEmpty());  //如果栈为空，则报错
    return list[top--];  //返回栈顶元素，并将其弹出栈顶
}

template<class T,int SIZE>
const T &Stack<T,SIZE>::peek() const { //访问栈顶元素
    assert(!isEmpty());    // 如果栈为空，则报错
    return list[top];  // 返回栈顶元素
}

template<class T,int SIZE>
bool Stack<T,SIZE>::isEmpty() const {
    return top==-1;         //测试栈是否为空
}

template<class T,int SIZE>
bool Stack<T,SIZE>::isFull() const {
    return top==SIZE-1;                 //测试栈是否为满
}

template<class T,int SIZE>
void Stack<T,SIZE>::clear(){
    top=-1;                             //清空栈
}
int main()
{
    Stack<int>A;
    Stack<char>B;
    int x,n;
    char ch;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>x;
        A.push(x);
    }
    while(!A.isEmpty())
    {
        x=A.pop();
        cout<<x<<" ";
    }
    cout<<endl;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>ch;
        B.push(ch);
    }
    while(!B.isEmpty())
    {
        ch = B.pop();
        cout<<ch<<" ";
    }
    return 0;
}
